generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId       Int       @id @default(autoincrement())
  userName     String
  userEmail    String    @unique
  userPhone    Int?
  userPassword String
  userAddress  String?
  created_at   DateTime  @default(now())

  // Relations
  orders   Orders[]
  cart     Cart[]
  payments Payments[]
  reviews  Reviews[]
}

model Products {
  productId          Int            @id @default(autoincrement())
  productName        String
  productDescription String
  productPrice       Int
  productQty         Int
  productImage       String?
  created_at         DateTime       @default(now())

  // Relations
  cart         Cart[]
  orderDetails OrderDetails[]
  reviews      Reviews[]
}

model Orders {
  orderId     Int           @id @default(autoincrement())
  userId      Int
  orderAmount Int
  orderDate   DateTime

  // Relations
  user         Users         @relation(fields: [userId], references: [userId])
  orderDetails OrderDetails[]
  payments     Payments[]
}

model Cart {
  cartId          Int       @id @default(autoincrement())
  productId       Int
  userId          Int
  productQuantity Int

  // Relations
  user    Users    @relation(fields: [userId], references: [userId])
  product Products @relation(fields: [productId], references: [productId])
}

model OrderDetails {
  orderDetailId   Int       @id @default(autoincrement())
  orderId         Int
  productId       Int
  productQuantity Int
  productPrice    Int

  // Relations
  order   Orders   @relation(fields: [orderId], references: [orderId])
  product Products @relation(fields: [productId], references: [productId])
}

model Reviews {
  reviewId  Int       @id @default(autoincrement())
  userId    Int
  productId Int
  review    String

  // Relations
  user    Users    @relation(fields: [userId], references: [userId])
  product Products @relation(fields: [productId], references: [productId])
}

model Payments {
  paymentId        Int       @id @default(autoincrement())
  userId           Int
  orderId          Int
  razorpayOrderId  String
  razorpayPaymentId String?  // Filled after payment is successful
  paymentMode      String
  paymentStatus    String
  paymentDate      DateTime @default(now())
  paymentAmount    Int

  // Relations
  user  Users  @relation(fields: [userId], references: [userId])
  order Orders @relation(fields: [orderId], references: [orderId])
}

model Categories {
  categoryId   Int    @id @default(autoincrement())
  categoryName String
}